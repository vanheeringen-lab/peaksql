name: ContinuousIntegration

on:
  pull_request:
  push:
    branches:
      - master


jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.7]
        os: ['ubuntu-latest', 'macos-latest']
      fail-fast: false

    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - uses: goanpeca/setup-miniconda@v1.0.2
      with:
       activate-environment: peaksql
       environment-file: environment.yml
       python-version: ${{ matrix.python-version }}
       shell: bash -l {0}

    - name: Install CI related
      shell: bash -l {0}
      run: |
        conda install coverage

      - name: Set ENV for codeclimate (pull_request)
        run: |
          git fetch --no-tags --prune --depth=1 origin +refs/heads/$GITHUB_HEAD_REF:refs/remotes/origin/$GITHUB_HEAD_REF
          echo "::set-env name=GIT_BRANCH::$GITHUB_HEAD_REF"
          echo "::set-env name=GIT_COMMIT_SHA::$(git rev-parse origin/$GITHUB_HEAD_REF)"
        if: github.event_name == 'pull_request'

      - name: Set ENV for codeclimate (push)
        run: |
          echo "::set-env name=GIT_BRANCH::$GITHUB_REF"
          echo "::set-env name=GIT_COMMIT_SHA::$GITHUB_SHA"
        if: github.event_name == 'push'

    - name: Test
      shell: bash -l {0}
      run: |
        coverage run -m unittest discover test
        coverage xml

    - name: Report Code Climate code coverage  (failure)
      if: failure() && matrix.os == 'ubuntu-latest'
      env:
        CC_TEST_REPORTER_ID: ${{secrets.CodeClimate}}
      run: |
        GIT_BRANCH=$GITHUB_REF GIT_COMMIT_SHA=$GITHUB_SHA ./cc-test-reporter after-build -t simplecov --exit-code 1

    - name: Report Code Climate code coverage (success)
      if: success() && matrix.os == 'ubuntu-latest'
      env:
        CC_TEST_REPORTER_ID: ${{secrets.CodeClimate}}
      run: |
        ./cc-test-reporter after-build --coverage-input-type coverage.py --exit-code 0
